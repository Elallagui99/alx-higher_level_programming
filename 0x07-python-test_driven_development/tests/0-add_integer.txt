Test cases for 0-add_integer module
===================================

The 0-add_integer module takes two itegers or floats as arguments and returns their sum

Usage
=====

Importing function from the module:
  >>> add_integer = __import__('0-add_integer').add_integer

Adding two [ositive integers
  >>> add_integer(1, 1)
   2

Adding one positive and one negative integer
  >>> add_integer(5, -2)
   3

Adding two negative integers
  >>> add_integer(-5, -2)
   -7

adding positive float a and default b=98
  >>> add_integer(2.5)
   100

adding positie float a with negative int b
  >>> add_integer(2.5, -5)
   -3

adding two negative floats
  >>> add_integer(-2.5, -5.2)
   -7

adding an int and string
  >>> add_integer(2, "alx")
  Traceback (most recent call last):
             ...
  TypeError: a must be an integer

adding a letter and a number
  >>> add_integer('c', 1)
  Traceback (mst recent call last):
          ...
  TypeError: a must be an integer

passing no arg
  >>> add_integer(None)
  Traceback (most recent call last):
          ...
  TypeError: a must be an integer

adding two letters
  >>> add_integer('c', 'm')
  Traceback (most recent call last):
        ...
  TypeError: a must be integer

adding a tuple
  >>> add_integer((1, 1))
  Traceback (most recent call last):
         ...
  TypeError: a must be integer

adding a number and list
  >>> add_integer(123, [])
  Traceback (most recent call last):
           ...
  TypeError: a must be an integer

Passing a only one string
    >>> add_integer("Hello")
    Traceback (most recent call last):
	      ...
    TypeError: a must be an integer

Adding two float numbers (a = 1.2 and b = 4.2)
    >>> add_integer(1.2, 4.2)
    5

Case Overflow:

    >>> add_integer(float('inf'), 0)
    Traceback (most recent call last):
    	      ...
    OverflowError: cannot convert float infinity to integer

Case Overflow 2:

    >>> add_integer(float('inf'), float('-inf'))
    Traceback (most recent call last):
    	      ...
    OverflowError: cannot convert float infinity to integer

Case NaN 1:

    >>> add_integer(0, float('nan'))
    Traceback (most recent call last):
    	      ...
    ValueError: cannot convert float NaN to integer

Case NaN 2:

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    	      ...
    ValueError: cannot convert float NaN to integer
